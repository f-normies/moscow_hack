// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { DicomUploadDicomZipData, DicomUploadDicomZipResponse, DicomListDicomStudiesData, DicomListDicomStudiesResponse, DicomGetDicomStudyData, DicomGetDicomStudyResponse, DicomDeleteDicomStudyData, DicomDeleteDicomStudyResponse, DicomGetDicomMetadataData, DicomGetDicomMetadataResponse, DicomGetSeriesMetadataData, DicomGetSeriesMetadataResponse, DicomDicomHealthCheckResponse, FilesHealthCheckResponse, FilesUploadFileData, FilesUploadFileResponse, FilesListFilesData, FilesListFilesResponse, FilesGetFileInfoData, FilesGetFileInfoResponse, FilesDeleteFileData, FilesDeleteFileResponse, FilesGetDownloadUrlData, FilesGetDownloadUrlResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class DicomService {
    /**
     * Upload Dicom Zip
     * Upload DICOM ZIP archive for processing
     * @param data The data for the request.
     * @param data.formData
     * @returns DICOMStudyPublic Successful Response
     * @throws ApiError
     */
    public static uploadDicomZip(data: DicomUploadDicomZipData): CancelablePromise<DicomUploadDicomZipResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/dicom/upload',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Dicom Studies
     * List DICOM studies for current user
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns DICOMStudyPublic Successful Response
     * @throws ApiError
     */
    public static listDicomStudies(data: DicomListDicomStudiesData = {}): CancelablePromise<DicomListDicomStudiesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dicom/studies',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Dicom Study
     * Get DICOM study details with series
     * @param data The data for the request.
     * @param data.studyId
     * @returns DICOMStudyPublic Successful Response
     * @throws ApiError
     */
    public static getDicomStudy(data: DicomGetDicomStudyData): CancelablePromise<DicomGetDicomStudyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dicom/studies/{study_id}',
            path: {
                study_id: data.studyId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Dicom Study
     * Delete DICOM study and all associated files
     * @param data The data for the request.
     * @param data.studyId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteDicomStudy(data: DicomDeleteDicomStudyData): CancelablePromise<DicomDeleteDicomStudyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/dicom/studies/{study_id}',
            path: {
                study_id: data.studyId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Dicom Metadata
     * Get detailed DICOM metadata for a file
     * @param data The data for the request.
     * @param data.fileId
     * @returns DICOMMetadataPublic Successful Response
     * @throws ApiError
     */
    public static getDicomMetadata(data: DicomGetDicomMetadataData): CancelablePromise<DicomGetDicomMetadataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dicom/metadata/{file_id}',
            path: {
                file_id: data.fileId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Series Metadata
     * Get all DICOM metadata for files in a series
     * @param data The data for the request.
     * @param data.seriesId
     * @returns DICOMMetadataPublic Successful Response
     * @throws ApiError
     */
    public static getSeriesMetadata(data: DicomGetSeriesMetadataData): CancelablePromise<DicomGetSeriesMetadataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dicom/series/{series_id}/metadata',
            path: {
                series_id: data.seriesId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Dicom Health Check
     * Check DICOM service health
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static dicomHealthCheck(): CancelablePromise<DicomDicomHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dicom/health'
        });
    }
    
}

export class FilesService {
    /**
     * Health Check
     * Check MinIO service health
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<FilesHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/health'
        });
    }
    
    /**
     * Upload File
     * Upload a file to MinIO storage
     * @param data The data for the request.
     * @param data.formData
     * @returns FileMetadataPublic Successful Response
     * @throws ApiError
     */
    public static uploadFile(data: FilesUploadFileData): CancelablePromise<FilesUploadFileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/files/upload',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Files
     * Retrieve files for the current user
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns FilesPublic Successful Response
     * @throws ApiError
     */
    public static listFiles(data: FilesListFilesData = {}): CancelablePromise<FilesListFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get File Info
     * Get file metadata by ID
     * @param data The data for the request.
     * @param data.fileId
     * @returns FileMetadataPublic Successful Response
     * @throws ApiError
     */
    public static getFileInfo(data: FilesGetFileInfoData): CancelablePromise<FilesGetFileInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/{file_id}',
            path: {
                file_id: data.fileId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete File
     * Delete a file from storage and database
     * @param data The data for the request.
     * @param data.fileId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteFile(data: FilesDeleteFileData): CancelablePromise<FilesDeleteFileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/files/{file_id}',
            path: {
                file_id: data.fileId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Download Url
     * Generate a presigned download URL for a file
     * @param data The data for the request.
     * @param data.fileId
     * @param data.expiryHours
     * @returns FileMetadataWithUrl Successful Response
     * @throws ApiError
     */
    public static getDownloadUrl(data: FilesGetDownloadUrlData): CancelablePromise<FilesGetDownloadUrlResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/files/{file_id}/download-url',
            path: {
                file_id: data.fileId
            },
            query: {
                expiry_hours: data.expiryHours
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}