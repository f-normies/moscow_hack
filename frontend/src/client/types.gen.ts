// This file is auto-generated by @hey-api/openapi-ts

export type Body_dicom_upload_dicom_zip = {
    file: (Blob | File);
};

export type Body_files_upload_file = {
    file: (Blob | File);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type DICOMMetadataPublic = {
    instance_number?: (number | null);
    rows?: (number | null);
    columns?: (number | null);
    pixel_spacing?: (string | null);
    slice_thickness?: (string | null);
    window_center?: (string | null);
    window_width?: (string | null);
    extracted_metadata?: ({
    [key: string]: unknown;
} | null);
    id: string;
    file_id: string;
    created_at: string;
};

export type DICOMSeriesPublic = {
    series_instance_uid: string;
    series_number?: (number | null);
    series_description?: (string | null);
    modality?: (string | null);
    body_part_examined?: (string | null);
    id: string;
    image_count: number;
    created_at: string;
};

export type DICOMStudyPublic = {
    study_instance_uid: string;
    study_date?: (string | null);
    study_time?: (string | null);
    study_description?: (string | null);
    patient_id?: (string | null);
    modality?: (string | null);
    institution_name?: (string | null);
    id: string;
    file_count: number;
    created_at: string;
    series?: Array<DICOMSeriesPublic>;
};

export type FileMetadataPublic = {
    filename: string;
    original_name: string;
    size: number;
    content_type: string;
    id: string;
    created_at: string;
    updated_at?: (string | null);
};

export type FileMetadataWithUrl = {
    filename: string;
    original_name: string;
    size: number;
    content_type: string;
    id: string;
    created_at: string;
    updated_at?: (string | null);
    download_url?: (string | null);
};

export type FilesPublic = {
    data: Array<FileMetadataPublic>;
    count: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type DicomUploadDicomZipData = {
    formData: Body_dicom_upload_dicom_zip;
};

export type DicomUploadDicomZipResponse = (DICOMStudyPublic);

export type DicomListDicomStudiesData = {
    limit?: number;
    skip?: number;
};

export type DicomListDicomStudiesResponse = (Array<DICOMStudyPublic>);

export type DicomGetDicomStudyData = {
    studyId: string;
};

export type DicomGetDicomStudyResponse = (DICOMStudyPublic);

export type DicomDeleteDicomStudyData = {
    studyId: string;
};

export type DicomDeleteDicomStudyResponse = (Message);

export type DicomGetDicomMetadataData = {
    fileId: string;
};

export type DicomGetDicomMetadataResponse = (DICOMMetadataPublic);

export type DicomGetSeriesMetadataData = {
    seriesId: string;
};

export type DicomGetSeriesMetadataResponse = (Array<DICOMMetadataPublic>);

export type DicomDicomHealthCheckResponse = ({
    [key: string]: unknown;
});

export type FilesHealthCheckResponse = ({
    [key: string]: unknown;
});

export type FilesUploadFileData = {
    formData: Body_files_upload_file;
};

export type FilesUploadFileResponse = (FileMetadataPublic);

export type FilesListFilesData = {
    limit?: number;
    skip?: number;
};

export type FilesListFilesResponse = (FilesPublic);

export type FilesGetFileInfoData = {
    fileId: string;
};

export type FilesGetFileInfoResponse = (FileMetadataPublic);

export type FilesDeleteFileData = {
    fileId: string;
};

export type FilesDeleteFileResponse = (Message);

export type FilesGetDownloadUrlData = {
    expiryHours?: number;
    fileId: string;
};

export type FilesGetDownloadUrlResponse = (FileMetadataWithUrl);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);